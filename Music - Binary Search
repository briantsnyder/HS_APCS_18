/**
 * Purpose: Class for songs, which will be used to create several
 * sequential search methods
 *
 * Brian Snyder
 * 3/20/18
 *
 */
public class Music // same class and methods from previosu assignments
{
    // instance variables
    private int year;
    private String title;
    private String artist;

    // Constructor for objects of class Music
    public Music(String t, int y, String a)
    {
        // initialize instance variables
        title = t;
        year = y;
        artist = a;
    }

    public String getTitle()
    {
        return title;
    }
   
    public void setTitle(String t)
    {
        title = t;
    }
   
    public String getArtist()
    {
        return artist;
    }
    
    public void setArtist(String a)
    {
        artist = a;
    }
   
    public int getYear()
    {
        return year;
    }
    
    public void setTitle(int y)
    {
        year = y;
    }
   
    public String toString()
    {
        String str = String.format( "%-25s %4d   %-20s ", title,  year , artist);
        return str;
    }
}


/**
 * Tester class for Music class
 *
 * Brian Snyder
 * 3/20/18
 */
public class MusicTesterV3 {
    public static void main(String args[]) {
        // integer used to determine if a song was found
        int test;
        
        // declares array
        Music[] songs = new Music[10];
        
        // initializes objects for array
        songs[0] = new Music("God's Plan", 2018, "Drake");
        songs[1] = new Music("Havana", 2018, "Camila Cabello");
        songs[2] = new Music("Say Something", 2018, "Justin Timberlake");
        songs[3] = new Music("Five more Minutes", 2018, "Scotty McCreery");
        songs[4] = new Music("The Champion", 2018, "Carrie Underwood");
        songs[5] = new Music("HUMBLE", 2017, "Kendric Lamar");
        songs[6] = new Music("Shape of You", 2017, "Ed Sherran");
        songs[7] = new Music("Despacito", 2017, "Luis Fonsi");
        songs[8] = new Music("Thunder", 2016, "Imagine Dragons");
        songs[9] = new Music("Can't Stop the Feeling!", 2016, "Justin Timberlake");
        
        // prints all the songs
        System.out.println("Songs:\n");
        System.out.printf("%-25s %-6s %-20s%n", "Title", "Year", "Artist");
        System.out.println("------------------------------------------------");
        printSongs(songs);
        
        // Searches for a specific song title
        System.out.println("\nSearching for Havana:");
        sortTitle(songs); // sorts by title
        test = binarySearchTitle(songs, "Havana");
        if (test != -1) {
            System.out.println("Found: " + songs[test]);
        } else {
            System.out.println("Not found.");
        }
        
        // displays results when a specific song title is not found
        System.out.println("\nSearching for Hello");
        test = binarySearchTitle(songs, "Hello");
        if (test != -1) {
            System.out.println("Found: " + songs[test]);
        } else {
            System.out.println("Not found.");
        }
        
        // searches for all songs from a specific year
        System.out.println("\nSearching for 2017 songs:");
        sortYear(songs); // sorts by year
        binarySearchYear(songs, 2017);
        
        // displays results when a year is not found
        System.out.println("\nSearching for 2015 songs:");
        binarySearchYear(songs, 2015);
        
        // searhces for all song from a specific artist
        System.out.println("\nSearching for Justin Timberlake:");
        mergeSortArtist(songs, 0, songs.length-1); // sorts by artist name
        binarySearchArtist(songs, "Justin Timberlake");
        
        // displays results when a specific artist is not found
        System.out.println("\nSearching for Adele");
        binarySearchArtist(songs, "Adele");
    }
    // method that prints all songs
    public static void printSongs(Music[] songs) {
        for (int i = 0; i < songs.length; i++) {
            System.out.println(songs[i]);
        }
    }
    // sorts by song title - Insertion Method
    public static void sortTitle(Music[] songs) {
        Music[] a = new Music[songs.length];
        for (int i = 0; i < songs.length; i++) {
            Music next = songs[i];
            int insertIndex = 0;
            int k = i;
            while (k > 0 && insertIndex == 0) {
                    if (next.getTitle().compareTo(a[k-1].getTitle()) > 0) {
                        insertIndex = k;
                    } else {
                        a[k] = a[k-1];
                    }
                    k--;
            }
            a[insertIndex] = next;
        }
    }
    // method that sorts the years of songs - Selection Sort
    public static void sortYear(Music[] songs) {
        int i;
        int k;
        int posMax;
        Music temp;
        
        for (i = songs.length-1; i>= 0; i--) {
            posMax = 0;
            for (k = 0; k <= i; k++) {
                if (songs[k].getYear() > songs[posMax].getYear()) {
                        posMax = k;
                }
            }
            temp = songs[i];
            songs[i] = songs[posMax];
            songs[posMax] = temp;
        }
    }
    // mehod that sorts by Artist - Merge Sort
    public static void mergeSortArtist(Music[] songs, int low, int high) {
        if (low == high) {
            return;
        }
        int mid = (low + high) / 2;
        mergeSortArtist(songs, low, mid);
        mergeSortArtist(songs, mid+1, high);
        mergeArtist(songs, low, mid, high);
    }
    // methd that merges divisions and organizes them for Artist sorting - Merge Sort
    public static void mergeArtist(Music[] songs, int low, int mid, int high) {
        Music[] temp = new Music[high-low+1];
        int i = low;
        int j = mid+1;
        int n = 0;
        while(i <= mid || j <= high) {
            if (i > mid) {
                temp[n] = songs[j];
                j++;
            } else if (j > high) {
                temp[n] = songs[i];
                i++;
            } else if (songs[i].getArtist().compareTo(songs[j].getArtist()) > 0) {
                temp[n] = songs[i];
                i++;
            } else {
                temp[n] = songs[j];
                j++;
            }
            n++;
        }
        for (int k = low; k <= high; k++) {
            songs[k] = temp[k-low];
        }
    }
    // method that uses binary search to find a specific title
    public static int binarySearchTitle(Music[] songs, String toFind) {
        int high = songs.length;
        int low = -1;
        int probe;
        while( high - low > 1) {
            probe = (high + low) / 2;
            if (songs[probe].getTitle().compareTo(toFind) > 0) {
                high = probe;
            } else {
                low = probe;
            }
        }
        if ((low >= 0) && (songs[low].getTitle().compareTo(toFind) == 0)) {
            return low;
        } else {
            return -1;
        }
    }
    // uses binary search to find a specific year
    public static void binarySearchYear(Music[] songs, int toFind) {
        int high = songs.length;
        int low = -1;
        int probe;
        while (high - low > 1) {
            probe = (high + low) / 2;
            if (songs[probe].getYear() > toFind) {
                high = probe;
            } else {
                low = probe;
                if (songs[probe].getYear() == toFind) {
                    break;
                }
            }
        }
        if ((low >= 0) && (songs[low].getYear() == toFind)) {
            linearPrintYear(songs, low, toFind);
        } else {
            System.out.println("NOT found: " + toFind);
        }
    }
    // prints all elements that match the criteria for the specific year
    public static void linearPrintYear(Music[] songs, int low, int toFind) {
        int i;
        int start = low;
        int end = low;
        i = low - 1;
        while ((i > 0) && (songs[i].getYear() == toFind)) {
            start = i;
            i--;
        }
        i = low + 1;
        while((i < songs.length) && (songs[i].getYear() == toFind)) {
            end = i;
            i++;
        }
        for (i = start; i <= end; i++) {
            System.out.println(songs[i]);
        }
    }
    // uses binary search to find a specific Artist
    public static void binarySearchArtist(Music[] songs, String toFind) {
        int high = songs.length;
        int low = -1;
        int probe;
        while(high - low > 1) {
            probe = (high + low) / 2;
            if (songs[probe].getArtist().compareTo(toFind) > 0) {
                high = probe;
            } else {
                low = probe;
                if (songs[probe].getArtist().compareTo(toFind) == 0) {
                    break;
                }
            }
        }
        if ((low >= 0) && (songs[low].getArtist().compareTo(toFind) == 0)) {
            linearPrintArtist(songs, low, toFind);
        } else {
            System.out.println("NOT found: " + toFind);
        }
    }
    // prints all elements that match the criteria for the specific Artist
    public static void linearPrintArtist(Music[] songs, int low, String toFind) {
        int i;
        int start = low;
        int end = low;
        i = low - 1;
        while((i >= 0) && (songs[i].getArtist().compareTo(toFind) == 0)) {
            start = i;
            i--;
        }
         i = low + 1;
        while (( i < songs.length) && (songs[i].getArtist().compareTo(toFind) == 0)) {
            end = i;
            i++;
        }
        for (i = start; i <= end; i++) {
            System.out.println(songs[i]);
        }
    }
}
