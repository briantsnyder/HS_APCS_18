/**
 * Card.java
 * Card represents a playing card.
 *
 *  Brian Snyder
 *  3/21/18
 */

public class Card {

   private String suit;      // the suit of the card
   private String rank;      // the rank of the card
   private int pointValue;   // the point value of the card

    /**
    * Creates a new Card instance.
    *
    * @param cardRank  a String value
    *                  containing the rank of the card
    * @param cardSuit  a String value
    *                  containing the suit of the card
    * @param cardPointValue an int value
    *                  containing the point value of the card
    */
   public Card(String cardRank, String cardSuit, int cardPointValue)
   {
      rank = cardRank;
      suit = cardSuit;
      pointValue = cardPointValue;
   }

   /**
    * Accesses this Card's suit.
    * @return this Card's suit.
    */
    public String suit()
   {
      return suit;
   }

   /**
    * Accesses this Card's rank.
    * @return this Card's rank.
    */
   public String rank()
   {
      return rank;
   }

    /**
    * Accesses this Card's point value.
    * @return this Card's point value.
    */
   public int pointValue()
   {
      return pointValue;
   }

   /** Compare this card with the argument.
    * @param otherCard the other card to compare to this
    * @return true if the rank, suit, and point value of this card
    *              are equal to those of the argument;
    *         false otherwise.
    */
   public boolean matches(Card otherCard)
   {
       if ((otherCard.rank().equals(rank)) && (otherCard.suit().equals(suit)) 
           && (otherCard.pointValue() == pointValue)) {
           return true;
       } else {
           return false;
       }
}

   /**
    * Converts the rank, suit, and point value into a string in the format
    *     "[Rank] of [Suit] (point value = [PointValue])".
    * This provides a useful way of printing the contents
    * of a Deck in an easily readable format or performing
    * other similar functions.
    *
    * @return a String containing the rank, suit,
    *         and point value of the card.
    */
   @Override
   public String toString()
   {
      return rank + " of " + suit + " (point value = " + pointValue + ")";
   }
}

import java.util.List;
import java.util.ArrayList;

/**
 * The Deck class represents a shuffled deck of cards.
 * It provides several operations including
 *      initialize, shuffle, deal, and check if empty.
 *
 *
 *  Brian Snyder
 *  3/21/18
 */
public class Deck
{
   private List<Card> cards;    //contains all the cards in the deck

   private int size;   // size is the number of not-yet-dealt cards.
                       // Cards are dealt from the top (highest index) down.
                       // The next card to be dealt is at size - 1.

   /**
    * Creates a new Deck instance.<BR>
    * It pairs each element of ranks with each element of suits,
    * and produces one of the corresponding card.
    * @param ranks is an array containing all of the card ranks.
    * @param suits is an array containing all of the card suits.
    * @param values is an array containing all of the card point values.
    */
   public Deck(String[] ranks, String[] suits, int[] values)
   {
      cards = new ArrayList<Card>();
      for (int i = 0; i < ranks.length; i++) {
          cards.add(new Card(ranks[i], suits[i], values[i]));
      }
      size = ranks.length;
      shuffle();
   }

   /**
    * Determines if this deck is empty (no undealt cards).
    * @return true if this deck is empty, false otherwise.
    */
   public boolean isEmpty()
   {
      if (size == 0) {
          return true;
      } else {
          return false;
      }
   }

   /**
    * Accesses the number of undealt cards in this deck.
    * @return the number of undealt cards in this deck.
    */
   public int size()
   {
      return size;
   }

   /**
    * Randomly permute the given collection of cards
    * and reset the size to represent the entire deck.
    */
   public void shuffle()
   {
      int r;
      List<Card> test = new ArrayList<Card>();
      for (int i = size-1; i > 0; i--) {
          r = (int)(Math.random()*(i+1));
          test.add(cards.get(i));
          cards.set(i,cards.get(r));
      }
   }
   
   /**
    * Deals a card from this deck.
    * @return the card just dealt, or null if all the cards have been
    *         previously dealt.
    */
   public Card deal()
   {
      if (size == 0) {
          return null;
      } else {
          size--;
          return cards.get(size);
      }
   }

   /**
    * Generates and returns a string representation of this deck.
    * @return a string representation of this deck.
    */
   @Override
   public String toString()
   {
      String rtn = "size = " + size + "\nUndealt cards: \n";

      for (int k = size - 1; k >= 0; k--)
      {
         rtn = rtn + cards.get(k);
         if (k != 0)
         {
            rtn = rtn + ", ";
         }
         if ((size - k) % 2 == 0)
         {
            // Insert carriage returns so entire deck is visible on console.
            rtn = rtn + "\n";
         }
      }

      rtn = rtn + "\nDealt cards: \n";
      for (int k = cards.size() - 1; k >= size; k--)
      {
         rtn = rtn + cards.get(k);
         if (k != size)
         {
            rtn = rtn + ", ";
         }
         if ((k - cards.size()) % 2 == 0)
         {
            // Insert carriage returns so entire deck is visible on console.
            rtn = rtn + "\n";
         }
      }
      rtn = rtn + "\n";
      return rtn;
   }
}

/**
 * This is a class that tests the Deck class.
 *
 *  Brian Snyder
 *  3/21/18
 */

public class DeckTester
{
   /**
    * The main method in this class checks the Deck operations for consistency.
    * @param args is not usemyDeck.
    */
   public static void main(String[] args)
   {
      /* *** TO BE IMPLEMENTED IN ACTIVITY 2 *** */
      /* Uncomment blocks of code to test the Deck class */

      String[] myRanks = {"queen", "king", "ace", "jack", "10", "6", "2", "king", "ace", "5" };
      String[] mySuits = {"heart", "spade", "diamond", "club", "spade", "diamond", "heart", "club", "heart", "diamond"};
      int[] myPointValues = {12, 13, 1, 11, 10, 6, 2, 13, 1, 5};
      Deck myDeck = new Deck(myRanks, mySuits, myPointValues);

      System.out.println("**** Original Deck Methods ****");
      System.out.println("  toString: \n" + myDeck.toString());
      System.out.println("  isEmpty: " + myDeck.isEmpty());
      System.out.println("  size: " + myDeck.size());
      System.out.println();
      System.out.println();

      System.out.println("**** Deal a Card ****");
      System.out.println("  deal: " + myDeck.deal());
      System.out.println();
      System.out.println();

      System.out.println("**** Deck Methods After 1 Card Dealt ****");
      System.out.println("  toString:\n" + myDeck.toString());
      System.out.println("  isEmpty: " + myDeck.isEmpty());
      System.out.println("  size: " + myDeck.size());
      System.out.println();
      System.out.println();

      for (int i = 0; i < 4; i++) {
          myDeck.deal();
      }
      
      System.out.println("**** Deal Remaining 5 Cards ****");
      System.out.println("  toString:\n" + myDeck.toString());
      System.out.println("  isEmpty: " + myDeck.isEmpty());
      System.out.println("  size: " + myDeck.size());
      System.out.println();
      System.out.println();
      
      for (int i = 0; i < 5; i++) {
          myDeck.deal();
      }

      System.out.println("**** Deck Methods After All Cards Dealt ****");
      System.out.println("  toString:\n" + myDeck.toString());
      System.out.println("  isEmpty: " + myDeck.isEmpty());
      System.out.println("  size: " + myDeck.size());
      System.out.println();
      System.out.println();
      
      System.out.println("**** Deal a Card From Empty Deck ****");
      System.out.println("  deal: " + myDeck.deal());
      System.out.println();
      System.out.println();


      /* *** TO BE IMPLEMENTED IN ACTIVITY 4 *** */
      // initializes 52 card deck
      System.out.println("\n**** 52 Card Deck shuffle Tests ****");
      String[] ranks52 = {"ace", "ace", "ace", "ace", "2", "2", "2", "2",
                         "3", "3", "3", "3", "4", "4", "4", "4", "5","5","5",
                         "5", "6","6","6","6","7","7","7","7","8","8","8","8",
                        "9","9","9","9","10","10","10","10","jack","jack","jack",
                    "jack","queen","queen","queen","queen","king","king","king", "king"};
      String[] suits52 = {"spades", "clubs", "diamonds", "heart","spades", 
          "clubs", "diamonds", "heart","spades", "clubs", "diamonds", "heart",
          "spades", "clubs", "diamonds", "heart","spades", "clubs", "diamonds",
          "heart","spades", "clubs", "diamonds", "heart","spades", "clubs", 
          "diamonds", "heart","spades", "clubs", "diamonds", "heart","spades",
          "clubs", "diamonds", "heart","spades", "clubs", "diamonds", "heart",
          "spades", "clubs", "diamonds", "heart","spades", "clubs", "diamonds",
          "heart","spades", "clubs", "diamonds", "heart",};
      int[] pointValues52 = {1, 1, 1, 1, 2, 2, 2, 2,3,3,3,3,4,4,4,4,5,5,5,5,
        6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,
        13,13,13,13};
      Deck myDeck2 = new Deck(ranks52, suits52, pointValues52);

      System.out.println("  The Starting Deck ");
      System.out.println(myDeck2.toString());

      System.out.println("  The Deck After Dealing a Card" );
      System.out.println("deal: " + myDeck2.deal());
      myDeck2.shuffle(); // shuffles dec again
      System.out.println("  Shuffleing the Deck ");
      System.out.println(myDeck2.toString());


   }
}

/**
 * This class provides a convenient way to test shuffling methods.
 *
 *
 *  Brian Snyder
 */
public class Shuffler
{

   /**
    * The number of consecutive shuffle steps to be performed in each call
    * to each sorting procedure. Change this value to your code.
    */
   private static final int SHUFFLE_COUNT = 5;


   /**
    * Tests shuffling methods.
    * @param args is not used.
    */
   public static void main(String[] args)
   {
      System.out.println("Results of " + SHUFFLE_COUNT +
                         " consecutive perfect shuffles:");
      int[] values1 = {0, 1, 2, 3};
      for (int j = 1; j <= SHUFFLE_COUNT; j++)
      {
         perfectShuffle(values1);
         System.out.print("  " + j + ":");
         for (int k = 0; k < values1.length; k++)
         {
            System.out.print(" " + values1[k]);
         }
         System.out.println();
      }
      System.out.println();

      System.out.println("Results of " + SHUFFLE_COUNT +
                         " consecutive efficient selection shuffles:");
      int[] values2 = {0, 1, 2, 3};
      for (int j = 1; j <= SHUFFLE_COUNT; j++)
      {
         selectionShuffle(values2);
         System.out.print("  " + j + ":");
         for (int k = 0; k < values2.length; k++)
         {
            System.out.print(" " + values2[k]);
         }
         System.out.println();
      }
      System.out.println();
   }


   /**
    * Apply a "perfect shuffle" to the argument.
    * The perfect shuffle algorithm splits the deck in half, then interleaves
    * the cards in one half with the cards in the other.
    * @param values is an array of integers simulating cards to be shuffled.
    */
   public static void perfectShuffle(int[] values)
   {
      int[] cards = new int[values.length];
      for (int j = 1; j < (values.length/2)+1; j++) {
          if (j % 2 == 0) {
              cards[j-1] = values[j+1];
          } else {
              cards[j-1] = values[j];
          }
      }
      
      for (int j = values.length/2; j < values.length; j++) {
          if (j % 2 == 0) {
              cards[j] = values[j-2];
          } else {
              cards[j] = values[j-1];
          }          
      }
      for (int i = 0; i < cards.length; i++) {
          values[i] = cards[i];
      }
   }

   /**
    * Apply an "efficient selection shuffle" to the argument.
    * The selection shuffle algorithm conceptually maintains two sequences
    * of cards: the selected cards (initially empty) and the not-yet-selected
    * cards (initially the entire deck). It repeatedly does the following until
    * all cards have been selected: randomly remove a card from those not yet
    * selected and add it to the selected cards.
    * An efficient version of this algorithm makes use of arrays to avoid
    * searching for an as-yet-unselected card.
    * @param values is an array of integers simulating cards to be shuffled.
    */
   public static void selectionShuffle(int[] values)
   {
      int r;
      int[] cards = new int[values.length];
      for (int i = values.length-1; i > 0; i--) {
          r = (int)(Math.random()*(i+1));
          cards[i] = values[i];
          values[i] = values[r];
          values[r] = cards[i];
      }
   }
}

/**
 * This is a class that tests the Card class.
 *
 *  Brian Snyder
 *  3/21/18
 */

public class CardTester
{
   /**
    * The main method in this class checks the Card operations for consistency.
    * @param args is not used.
    */
   public static void main(String[] args) {

      /* *** TO BE IMPLEMENTED IN ACTIVITY 1 *** */

      // Establish new cards
      Card aceHearts = new Card("ace", "hearts", 1);
      Card aceSpades = new Card("ace", "spades", 1);
      Card aceHearts2 = new Card("ace", "hearts", 1);

      // Test card 1 and methods
      System.out.println("**** Tests Card 1: ace of hearts ****");
      System.out.println("  rank: " + aceHearts.rank());
      System.out.println("  suit: " + aceHearts.suit());
      System.out.println("  pointValue: " + aceHearts.pointValue());
      System.out.println("  toString: " + aceHearts.toString());
      System.out.println();

      // Test card 2
      System.out.println("**** ace of spaces Tests ****");
      System.out.println("  rank: " + aceSpades.rank());
      System.out.println("  suit: " + aceSpades.suit());
      System.out.println("  pointValue: " + aceSpades.pointValue());
      System.out.println("  toString: " + aceSpades.toString());
      System.out.println();
      
      // Test card 3
      System.out.println("**** ace of hearts Tests ****");
      System.out.println("  rank: " + aceHearts2.rank());
      System.out.println("  suit: " + aceHearts2.suit());
      System.out.println("  pointValue: " + aceHearts2.pointValue());
      System.out.println("  toString: " + aceHearts2.toString());
      System.out.println();
      
      // Test matches() method
      System.out.println("**** matches Tests ****");
      System.out.println("mathcing: " + aceHearts.matches(aceHearts2));
      System.out.println("not mathcing: " + aceHearts.matches(aceSpades));
      

   }
}

