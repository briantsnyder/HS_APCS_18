/**
 * Class that contains all the elements and methods for a contact 
 *
 * Brian Snyder
 * 3/21/18
 */
public class Contact {
    private String name, relation, birthday, phoneNum, email;
    Contact(String name, String relation, String birthday, String phoneNum, String email) {
        this.name = name;
        this.relation = relation;
        this.birthday = birthday;
        this.phoneNum = phoneNum;
        this.email = email;
    }
    
    public String getName() {
        return name;
    }
    
    public String getRelation() {
        return relation;
    }
    
    public String getBirthday() {
        return birthday;
    }
    
    public String getPhoneNum() {
        return phoneNum;
    }
    
    public String getEmail() {
        return email;
    }
    
    public String toString() {
        String str = String.format("%-17s %-8s %-20s %-14s %-20s", name, relation, birthday, phoneNum, email);
        return str;
    }
}

/**
 * Tester class for the Contact
 *
 * Brian Snyder
 * 3/21/18
 */
public class contactTester {
    public static void main(String args[]) {
        // integer used for values of binary searches
        int test;
        
        // declares array and initializes elements of array
        Contact[] contacts = new Contact[10];
        contacts[0] = new Contact ("Brett Henderson", "Friend", "July 3, 1991", "392-231-2291", "BrettDHenderson@gmail.com");
        contacts[1] = new Contact ("Jose Shaver", "Friend", "December 25, 1942", "580-678-9561", "JoseJShaver@aol.com");
        contacts[2] = new Contact ("Brett Giles", "Friend", "July 11, 1957", "656-206-7598", "BrettNGiles@yahoo.com");
        contacts[3] = new Contact ("Zachary Clark", "Brother", "September 26, 1997", "215-598-4812", "Clark@gmail.com");
        contacts[4] = new Contact ("Ashley Clark", "Sister", "October 28, 1982", "818-416-7438", "Clark@gmail.com");
        contacts[5] = new Contact ("Erin Janney", "Aunt", "October 17, 1959", "205-449-6900", "ErinGJanney@yahoo.com");
        contacts[6] = new Contact ("Charlene Shaw", "Aunt", "May 12, 1998", "205-449-6900", "CharleneSClark@gmail.com");
        contacts[7] = new Contact ("Wayne Baker", "Friend", "May 18, 1932", "508-280-9976", "WaynePBaker@aol.com");
        contacts[8] = new Contact ("Jeanine Cruz", "Aunt", "August 18, 1952", "626-217-9622", "JeanineHCruz@gmail.com");
        contacts[9] = new Contact ("Christopher Cook", "Friend", "July 3, 1933", "317-949-8522", "ChristopherMCook@gmail.com");
        
        // prints contact list
        System.out.println("Contact List");
        System.out.println("----------------------------------------------------------------");
        printResults(contacts);
        
        // binary search results for a specific name
        System.out.println("\n\nSearching for Wayne Baker");
        System.out.println("----------------------------------------------------------------");
        sortName(contacts);
        test = binarySearchName(contacts, "Wayne Baker");
        if (test != -1) {
            System.out.println("Found: " + contacts[test]);
        } else {
            System.out.println("NOT found.");
        }
        
        // binary search results when a specific name is not found
        System.out.println("\n\nSearching for William Smith");
        System.out.println("----------------------------------------------------------------");
        test = binarySearchName(contacts, "William Smith");
        if (test != -1) {
            System.out.println("Found: " + contacts[test]);
        } else {
            System.out.println("NOT found.");
        }
        
        // binary search results for all contacts with a specific relation
        System.out.println("\n\nSearching for contacts who are Friends");
        System.out.println("----------------------------------------------------------------");
        sortRelation(contacts);
        binarySearchRelation(contacts, "Friend");
        
        // binary search results for when no contacts have a specific relation
        System.out.println("\n\nSearching for contacts who are Fathers");
        System.out.println("----------------------------------------------------------------");
        binarySearchRelation(contacts, "Father");
        
        // sequential search result for a specific birth month
        System.out.println("\n\nSearching for Birthdays in July");
        System.out.println("----------------------------------------------------------------");
        findBirthMonth(contacts, "Jul");
        
        // sequential search result for when no contact has a specific birth month
        System.out.println("\n\nSearching for Birthdays in February");
        System.out.println("----------------------------------------------------------------");
        findBirthMonth(contacts, "Feb");
        
        // sequential search result for a specific phone number
        System.out.println("\n\nSearching for contacts with this phone number: 205-449-6900");
        System.out.println("----------------------------------------------------------------");
        findPhoneNum(contacts, "205-449-6900");
        
        // sequential result for when a contact does not have a specific phone number
        System.out.println("\n\nSearching for contacts with this phone number: 609-895-1555");
        System.out.println("----------------------------------------------------------------");
        findPhoneNum(contacts, "609-895-1555");
        
        // sequential result for a specific email address
        System.out.println("\n\nSearching for contacts with this email address: Clark@gmail.com");
        System.out.println("----------------------------------------------------------------");
        findEmail(contacts, "Clark@gmail.com");
        
        // seuential result for when a contact does not have a specific email address
        System.out.println("\n\nSearching for contacts with this email address: Smith@gmail.com");
        System.out.println("----------------------------------------------------------------");
        findEmail(contacts, "Smith@gmial.com");
    }
    // method that prints all elements of the array
    public static void printResults(Contact[] contacts) {
        for (int i = 0; i < contacts.length; i++) {
            System.out.println(contacts[i]);
        }
    }
    // method that sorts the elements by name - Selection Sort
    public static void sortName(Contact[] contacts) {
        int i, k, posMax;
        Contact temp;
        for (i = contacts.length-1; i>= 0; i--) {
            posMax = 0;
            for (k = 0; k <= i; k++) {
                if (contacts[k].getName().compareTo(contacts[posMax].getName()) > 0) {
                    posMax = k;
                }
            }
            temp = contacts[i];
            contacts[i] = contacts[posMax];
            contacts[posMax] = temp;
        }
    }
    // method that sorts the elements by relation - Selection Sort
    public static void sortRelation(Contact[] contacts) {
        int i, k, posMax;
        Contact temp;
        for (i = contacts.length-1; i>= 0; i--) {
            posMax = 0;
            for (k = 0; k <= i; k++) {
                if (contacts[k].getRelation().compareTo(contacts[posMax].getRelation())> 0) {
                    posMax = k;
                }
            }
            temp = contacts[i];
            contacts[i] = contacts[posMax];
            contacts[posMax] = temp;
        }
    }
    // method that uses binary search to find a specific name
    public static int binarySearchName(Contact[] contacts, String toFind) {
        int high = contacts.length;
        int low = -1;
        int probe;
        while (high - low > 1) {
            probe = (high + low) / 2;
            if (contacts[probe].getName().compareTo(toFind) > 0) {
                high = probe;
            } else {
                low = probe;
            }
        }
        if ((low >= 0) && (contacts[low].getName().compareTo(toFind) == 0)) {
            return low;
        } else {
            return -1;
        }
    }
    // uses binary search to find a specific Relation
    public static void binarySearchRelation(Contact[] contacts, String toFind) {
        int high = contacts.length;
        int low = -1;
        int probe;
        while (high - low > 1) {
            probe = (high + low) / 2;
            if (contacts[probe].getRelation().compareTo(toFind) > 0) {
                high = probe;
            } else {
                low = probe;
                if (contacts[probe].getRelation().compareTo(toFind) == 0) {
                    break;
                }
            }
        }
        if ((low >= 0) && (contacts[low].getRelation().compareTo(toFind) == 0)) {
            linearPrintRelation(contacts, low, toFind);
        } else {
            System.out.println("NOT found: " + toFind);
        }
    }
    // prints all elements that match the criteria for the specific Relation
    public static void linearPrintRelation(Contact[] contacts, int low, String toFind) {
        int i;
        int start = low;
        int end = low;
        i = low - 1;
        while ((i > 0) && (contacts[i].getRelation().compareTo(toFind) > 0)) {
            start = i;
            i--;
        } 
        i = low + 1;
        while((i < contacts.length) && (contacts[i].getRelation().compareTo(toFind) == 0)) {
            end = i;
            i++;
        }
        for (i = start; i <= end; i++) {
            System.out.println(contacts[i]);
        }
    }
    // Sequential search method for birth month
    public static void findBirthMonth(Contact[] contacts, String toFind) {
        int found = 0;
        System.out.println("Results: ");
        for (int i = 0; i < contacts.length; i++) {
            if (contacts[i].getBirthday().substring(0,3).compareTo(toFind) == 0) {
                System.out.println(contacts[i]);
                found++;
            }
        }
        if (found == 0) {
            System.out.println("No contact has a birthday within this month");
        }
    }
    // Sequential search method for a specific phone number
    public static void findPhoneNum(Contact[] contacts, String toFind) {
        int found = 0;
        System.out.println("Results: ");
        for (int i = 0; i < contacts.length; i++) {
            if (contacts[i].getPhoneNum().compareTo(toFind) == 0) {
                System.out.println(contacts[i]);
                found++;
            }
        }
        if (found == 0) {
            System.out.println(toFind + ", no contact has this number");
        }
    }
    // Sequential searh method for a specific email
    public static void findEmail(Contact[] contacts, String toFind) {
        int found = 0;
        System.out.println("Results: ");
        for (int i = 0; i < contacts.length; i++) {
            if (contacts[i].getEmail().compareTo(toFind) == 0) {
                System.out.println(contacts[i]);
                found++;
            }
        }
        if (found == 0) {
            System.out.println(toFind + ", no contact has this email extension");
        }
    }
}
